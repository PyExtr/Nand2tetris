// File name: projects/hw2/ALU2.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (op[0] == 1) set x = 0        // 16-bit constant
// if (op[1] == 1) set x = !x       // bitwise not
// if (op[2] == 1) set y = 0        // 16-bit constant
// if (op[3] == 1) set y = !y       // bitwise not
// if (op[4..5]== 0)  set out = x + y  // integer 2's complement addition
// if (op[4..5]== 1)  set out = x - y  // integer 2's complement subtraction
// if (op[4..5]== 2)  set out = x|y // bitwise or
// if (op[4..5]== 3)  set out = x & y  // bitwise and
// if (op[6] == 1) set out=out*2 (if out > 0 )  // bitwise shift left
// if (op[7] == 1) set out = !out   // bitwise not
// if (out == 0) set flags[0] = 1
// if (out < 0) set flags[1] = 1

CHIP ALU2 {
    IN  
        x[16], y[16], // 16-bit inputs  
		op[8];  // 8-bit input      


    OUT 
        out[16], // 16-bit output
		flags[5]; // flags
        

    PARTS:
	
	Mux16(a=x, b=false, sel=op[0], out=zdx); //Zero the x
    Not16(in=zdx, out=notx);                        //Not the x
    Mux16(a=zdx, b=notx, sel=op[1], out=ndx);       //chose x or !x
	// ditto for y
    Mux16(a=y, b=false,sel=op[2], out=zdy);			//Zero the y
    Not16(in=zdy, out=noty);                        //Not the y
    Mux16(a=zdy, b=noty, sel=op[3], out=ndy);       //chose y or !y
	
	AddSub16(a=ndx, b=ndy, op=false, out=xplusy, overflow=of1, carry=c1); //x+y
	AddSub16(a=ndx, b=ndy, op=true, out=xminusy, overflow=of2, carry=c2);  //x-y
	
	Mux(a=of1, b=of2, sel=op[4], out=of3);	        //Overflow check 
	Mux(a=of3, b=false, sel=op[5], out=ofFinal);    //if op[5]==0
	Mux(a=c1, b=c2, sel=op[4], out=c45);			//Carry check
	Mux(a=c45, b=false, sel=op[5], out=carryFinal); // if op[5]==0
	
	Or16(a=ndx, b=ndy, out=xory); 	//x|y
	And16(a=ndx, b=ndy, out=xandy); //x&y
	
	Mux4Way16(a=xplusy, b=xminusy, c=xory, d=xandy, sel=op[4..5], out=fxy, out[15]=fxyMSB);
	
	AddSub16(a=fxy, b=fxy, op=false, out=shiftxy,overflow=shiftof, carry=shiftc); //leftshift
	
	Mux16(a=shiftxy, b=fxy, sel=fxyMSB, out=xyaftershift); //if MSB
	Mux16(a=fxy, b=xyaftershift, sel=op[6], out=xyafterop6); //if  op[6]
	Mux(a=shiftc, b=false, sel=fxyMSB, out=shiftcfinal); //if carry for leftshift
	
	Not16(in=xyafterop6, out=nxyafterop6); //for op[7]
    Mux16(a=xyafterop6, b=nxyafterop6, sel=op[7], out=out, out=outflags, out[15]=MSB);
	
	
	//Flags
	Or16Way(in=outflags,out=o);  //flags[0] if out == 0
	Not(in=o,out=flags[0]);
	
	And(a=MSB, b=true, out=flags[1]); //flags[1]
	
	Xor16Way(in=outflags,out=xnor);
	Not(in=xnor,out=flags[2]);        //flags[2]
	

	Or(a=carryFinal, b=shiftcfinal, out=flags[3]);  //flags[3]
	
	Or(a=ofFinal, b=false, out=flags[4]);           //flags[4]
	
}








