// This file is part of home task by Vladislav Tritner & Israel Shushan
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: AddSub16

/**
 * sum 2 numbers (16 bits) and alart if there is overflow or not
 */

CHIP AddSub16 {
    IN a[16], b[16], op;
    OUT out[16], overflow, carry;

    PARTS:
    Xor(a=b[0], b=op, out=bXo1);
    FullAdder(a=a[0], b=bXo1, c=op, sum=out[0], carry=c1);

    Xor(a=b[1], b=op, out=bXo2);
    FullAdder(a=a[1], b=bXo2, c=c1, sum=out[1], carry=c2);

    Xor(a=b[2], b=op, out=bXo3);
    FullAdder(a=a[2], b=bXo3, c=c2, sum=out[2], carry=c3);

    Xor(a=b[3], b=op, out=bXo4);
    FullAdder(a=a[3], b=bXo4, c=c3, sum=out[3], carry=c4);

    Xor(a=b[4], b=op, out=bXo5);
    FullAdder(a=a[4], b=bXo5, c=c4, sum=out[4], carry=c5);

    Xor(a=b[5], b=op, out=bXo6);
    FullAdder(a=a[5], b=bXo6, c=c5, sum=out[5], carry=c6);

    Xor(a=b[6], b=op, out=bXo7);
    FullAdder(a=a[6], b=bXo7, c=c6, sum=out[6], carry=c7);

    Xor(a=b[7], b=op, out=bXo8);
    FullAdder(a=a[7], b=bXo8, c=c7, sum=out[7], carry=c8);

    Xor(a=b[8], b=op, out=bXo9);
    FullAdder(a=a[8], b=bXo9, c=c8, sum=out[8], carry=c9);

    Xor(a=b[9], b=op, out=bXo10);
    FullAdder(a=a[9], b=bXo10, c=c9, sum=out[9], carry=c10);

    Xor(a=b[10], b=op, out=bXo11);
    FullAdder(a=a[10], b=bXo11, c=c10, sum=out[10], carry=c11);

    Xor(a=b[11], b=op, out=bXo12);
    FullAdder(a=a[11], b=bXo12, c=c11, sum=out[11], carry=c12);

    Xor(a=b[12], b=op, out=bXo13);
    FullAdder(a=a[12], b=bXo13, c=c12, sum=out[12], carry=c13);

    Xor(a=b[13], b=op, out=bXo14);
    FullAdder(a=a[13], b=bXo14, c=c13, sum=out[13], carry=c14);

    Xor(a=b[14], b=op, out=bXo15);
    FullAdder(a=a[14], b=bXo15, c=c14, sum=out[14], carry=c15);

    Xor(a=b[15], b=op, out=bXo16);
    FullAdder(a=a[15], b=bXo16, c=c15, sum=out[15], carry=c16);

	Xor(a=c15, b=c16, out=overflow);
	Or(a=c16, b=false, out=carry);
}
